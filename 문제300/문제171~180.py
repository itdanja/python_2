
    #1. for 변수 in 리스트명 :
    #2. for 변수 in range( 시작값 , 끝값 , 증가단위 ) :
    #3. for 변수 in enumerate( 리스트명 ) :      인덱스와 값 동시 반환

# 문제 171
가격목록 = [32100,32150,32000,32500]

for 변수 in 가격목록 :
    print( 변수 )

for i in range(4) :
    print( 가격목록[i] )

# 문제 172
가격목록 = [32100,32150,32000,32500]
for i , 변수 in enumerate( 가격목록 ) :
    print( i , 변수 )

# 문제 173
가격목록 = [32100,32150,32000,32500]
for i in  range( len(가격목록) ) :
    print( 3-i , 가격목록[i] )

# 문제 174
가격목록 = [32100,32150,32000,32500]
for i in range( 1 , 4 ) :  # 0인덱스 제외
    print( 90 + 10 * i  , 가격목록[i] )

# 문제 175
내목록 = ["가" , "나" ,"다","라"]
###################### 반복문 없이 풀기 #######
print( 내목록[0] , 내목록[1] )
print( 내목록[1] , 내목록[2] )
print( 내목록[2] , 내목록[3] )
###################### 반복문 으로 풀기 ############
for i in range( 1 , 4 ) :
    print( 내목록[ i-1] , 내목록[i] )

# 문제 176
내목록 = ["가","나","다","라","마"]
###################### 반복문 없이 풀기 #######
print( 내목록[0] , 내목록[1] , 내목록[2] )
print( 내목록[1] , 내목록[2] , 내목록[3] )
print( 내목록[2] , 내목록[3] , 내목록[4] )
###################### 반복문 으로 풀기 ############
for i in range( 2 , 5 ) :
    print( 내목록[i-2] , 내목록[i-1] , 내목록[i] )

# 문제 177
내목록 = ["가","나","다","라"]
###################### 반복문 없이 풀기 #######
print( 내목록[3] , 내목록[2] )
print( 내목록[2] , 내목록[1] )
print( 내목록[1] , 내목록[0] )
###################### 반복문 으로 풀기 ############
for i in [ 3 , 2 , 1 ] :
    print( 내목록[i] , 내목록[i-1] )

# 문제 178 : 차분값  : 자신과 우측값과의 차분값
내목록 = [ 100 , 200 , 400 , 800 ]
print( 내목록[1] - 내목록[0] )
print( 내목록[2] - 내목록[1] )
print( 내목록[3] - 내목록[2] )

for i in range( 3 ) :
    print( 내목록[i+1] - 내목록[i] )

# 문제 179
내목록 = [ 100 , 200 , 400 , 800 , 1000 , 1300 ]
print( ( 내목록[0] + 내목록[1] + 내목록[2] ) / 3)
print( ( 내목록[1] + 내목록[2] + 내목록[3] ) / 3)
print( ( 내목록[2] + 내목록[3] + 내목록[4] ) / 3)
print( ( 내목록[3] + 내목록[4] + 내목록[5] ) / 3)

for i in range( 4 ) :
    print( (내목록[i] + 내목록[i+1] + 내목록[i+2] / 3 ) )

# 문제 180 : 변동폭 : 고가와 저가의 차 => 빼기
저가 = [ 100 , 200 , 400 , 800 , 1000]
고가 = [ 150 , 300 , 430 , 880 , 1000]

저장리스트 = []
for i in range( 5 ) :
    저장리스트.append(  고가[i] - 저가[i] )



























